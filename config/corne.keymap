/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25    // default: 10

/ {
    combos {
        compatible = "zmk,combos";

        fd_ctrl {
            bindings = <&kp LCTRL>;
            key-positions = <16 15>;
        };

        jk_ctrl {
            bindings = <&kp RCTRL>;
            key-positions = <19 20>;
        };

        fs_alt {
            bindings = <&kp LALT>;
            key-positions = <16 14>;
        };

        jl_alt {
            bindings = <&kp RALT>;
            key-positions = <19 21>;
        };

        fe_gui {
            bindings = <&kp LGUI>;
            key-positions = <16 3>;
        };

        ji_gui {
            bindings = <&kp RGUI>;
            key-positions = <19 8>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LC(LGUI) TAB  &kp Q  &kp W  &kp E  &kp R      &kp T               &kp Y             &kp U       &kp I      &kp O    &kp P     &kp RET
&lt 3 LC(TAB)     &kp A  &kp S  &kp D  &kp F      &kp G               &kp H             &kp J       &kp K      &kp L    &kp SEMI  &kp SQT
&lt 4 LC(T)       &kp Z  &kp X  &kp C  &kp V      &kp B               &kp N             &kp M       &kp COMMA  &kp DOT  &kp FSLH  &mt LC(LALT) RC(W)
                                &mo 2  &lt 1 ESC  &mt LSHIFT SPACE    &mt RSHIFT SPACE  &lt 1 BSPC  &lt 2 DEL
            >;
        };

        lower_layer {
            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6    &kp N7    &kp N8  &kp N9     &kp N0    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &kp HOME  &kp PG_UP
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans    &trans  &trans     &kp END   &kp PG_DN
                        &trans  &trans  &trans    &trans    &trans    &trans
            >;
        };

        raise_layer {
            bindings = <
&trans  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &trans
&trans  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&trans  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                          &trans    &trans    &trans       &trans     &trans     &trans
            >;
        };

        mouse_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &mkp MB4        &mkp MB1        &mkp MB2      &mkp MB5         &mkp MB3        &msc SCRL_UP
&trans  &trans  &trans  &trans  &trans  &trans    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &msc SCRL_LEFT  &msc SCRL_RIGHT
&trans  &trans  &trans  &trans  &trans  &trans    &trans          &trans          &trans        &trans           &trans          &msc SCRL_DOWN
                        &trans  &trans  &trans    &trans          &trans          &trans
            >;
        };

        fn_adjust_layer {
            bindings = <
&trans  &trans          &trans  &trans  &bt BT_CLR  &ext_power EP_TOG    &kp C_MUTE    &kp F1      &kp F2   &kp F3   &kp F4   &kp PRINTSCREEN
&trans  &trans          &trans  &trans  &bt BT_NXT  &trans               &kp C_VOL_UP  &kp F5      &kp F6   &kp F7   &kp F8   &kp C_BRI_UP
&trans  &studio_unlock  &trans  &trans  &bt BT_PRV  &trans               &kp C_VOL_DN  &kp F9      &kp F10  &kp F11  &kp F12  &kp C_BRI_DN
                                &trans  &sys_reset  &bootloader          &bootloader   &sys_reset  &trans
            >;
        };
    };
};
