/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20

/ {
    combos {
        compatible = "zmk,combos";

        fd_ctrl {
            bindings = <&kp LCTRL>;
            key-positions = <16 15>;
        };

        jk_ctrl {
            bindings = <&kp RCTRL>;
            key-positions = <19 20>;
        };

        fs_alt {
            bindings = <&kp LALT>;
            key-positions = <16 14>;
        };

        jl_alt {
            bindings = <&kp RALT>;
            key-positions = <19 21>;
        };

        fe_gui {
            bindings = <&kp LGUI>;
            key-positions = <16 3>;
        };

        ji_gui {
            bindings = <&kp RGUI>;
            key-positions = <19 8>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB        &kp Q  &kp W  &kp E                   &kp R      &kp T               &kp Y             &kp U       &kp I                     &kp O    &kp P     &kp RET
&lt 3 LC(TAB)  &kp A  &kp S  &kp D                   &kp F      &kp G               &kp H             &kp J       &kp K                     &kp L    &kp SEMI  &kp SQT
&lt 7 K_CMENU  &kp Z  &kp X  &kp C                   &kp V      &kp B               &kp N             &kp M       &kp COMMA                 &kp DOT  &kp FSLH  &mt LC(LALT) RG(W)
                             &mt LC(LS(LALT)) LC(W)  &lt 1 ESC  &mt LSHIFT SPACE    &mt RSHIFT SPACE  &lt 2 BSPC  &mt LC(LA(LS(LGUI))) DEL
            >;
        };

        lower_layer {
            bindings = <
&trans      &kp N1  &kp N2  &kp N3       &kp N4       &kp N5    &kp N6    &kp N7    &kp N8  &kp N9     &kp N0    &trans
&caps_word  &trans  &trans  &trans       &trans       &trans    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &kp HOME  &kp PG_UP
&trans      &trans  &trans  &kp LC(INS)  &kp LS(INS)  &trans    &trans    &trans    &trans  &trans     &kp END   &kp PG_DN
                            &trans       &trans       &trans    &trans    &trans    &trans
            >;
        };

        raise_layer {
            bindings = <
&trans  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &trans
&kp F1  &kp F2    &kp F3  &kp F4    &kp F5    &kp F6       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&kp F7  &kp F8    &kp F9  &kp F10   &kp F11   &kp F12      &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                          &trans    &trans    &trans       &trans     &trans     &trans
            >;
        };

        gear1_mouse_layer {
            bindings = <
&none  &none  &none  &none  &none  &none    &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &none     &none
&none  &none  &none  &none  &none  &none    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &none     &none
&none  &none  &none  &none  &none  &none    &mkp MB4        &mkp MB1        &mkp MB2      &mkp MB4         &mkp MB3  &none
                     &none  &none  &none    &mo 4           &mo 5           &mo 6
            >;
        };

        gear2_mouse_layer {
            bindings = <
&none  &none  &none  &none  &none  &none    &msc MOVE_X(-5)    &msc MOVE_Y(5)    &msc MOVE_Y(-5)    &msc MOVE_X(-5)   &none     &none
&none  &none  &none  &none  &none  &none    &mmv MOVE_X(-100)  &mmv MOVE_Y(200)  &mmv MOVE_Y(-200)  &mmv MOVE_X(200)  &none     &none
&none  &none  &none  &none  &none  &none    &mkp MB4           &mkp MB1          &mkp MB2           &mkp MB4          &mkp MB3  &none
                     &none  &none  &none    &none              &none             &none
            >;
        };

        gear3_mouse_layer {
            bindings = <
&none  &none  &none  &none  &none  &none    &msc MOVE_X(-5)    &msc MOVE_Y(5)    &msc MOVE_Y(-5)    &msc MOVE_X(-5)   &none     &none
&none  &none  &none  &none  &none  &none    &mmv MOVE_X(-100)  &mmv MOVE_Y(200)  &mmv MOVE_Y(-200)  &mmv MOVE_X(200)  &none     &none
&none  &none  &none  &none  &none  &none    &mkp MB4           &mkp MB1          &mkp MB2           &mkp MB4          &mkp MB3  &none
                     &none  &none  &none    &none              &none             &none
            >;
        };

        gear4_mouse_layer {
            bindings = <
&none  &none  &none  &none  &none  &none    &msc MOVE_X(-5)    &msc MOVE_Y(5)    &msc MOVE_Y(-5)    &msc MOVE_X(-5)   &none     &none
&none  &none  &none  &none  &none  &none    &mmv MOVE_X(-100)  &mmv MOVE_Y(200)  &mmv MOVE_Y(-200)  &mmv MOVE_X(200)  &none     &none
&none  &none  &none  &none  &none  &none    &mkp MB4           &mkp MB1          &mkp MB2           &mkp MB4          &mkp MB3  &none
                     &none  &none  &none    &none              &none             &none
            >;
        };

        adjust_layer {
            bindings = <
&bt BT_CLR  &bt BT_PRV      &bt BT_NXT    &trans             &trans        &trans          &kp C_MUTE    &trans      &trans  &trans  &trans  &kp PRINTSCREEN
&trans      &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2       &bt BT_SEL 3  &bt BT_SEL 4    &kp C_VOL_UP  &trans      &trans  &trans  &trans  &kp C_BRI_UP
&trans      &studio_unlock  &trans        &trans             &trans        &trans          &kp C_VOL_DN  &trans      &trans  &trans  &trans  &kp C_BRI_DN
                                          &ext_power EP_TOG  &sys_reset    &bootloader     &bootloader   &sys_reset  &trans
            >;
        };
    };
};
